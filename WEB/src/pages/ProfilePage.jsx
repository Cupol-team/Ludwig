import React, { useState, useEffect, useContext } from 'react';
import ProfileCard from '../components/ProfileCard';
import ProjectsList from '../components/ProjectsList';
import OrganizationsList from '../components/OrganizationsList';
import { useParams, useNavigate } from 'react-router-dom';
import { AuthContext } from '../context/AuthContext';
import { ProfileContainer } from '../styles/ProfileComponentStyles';
import { updateUserProfile, uploadUserAvatar, getUserOrganizations, getUserProjects, getUserProfile } from '../api/profile';

const ProfilePage = () => {
  const { userId } = useParams();
  const { profile: currentUserProfile } = useContext(AuthContext);
  const navigate = useNavigate();
  
  const [profile, setProfile] = useState(null);
  const [projects, setProjects] = useState([]);
  const [organizations, setOrganizations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isCurrentUser, setIsCurrentUser] = useState(false);
  const [userNotFound, setUserNotFound] = useState(false);
  
  useEffect(() => {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∂–¥–µ–º –µ–≥–æ –∑–∞–≥—Ä—É–∑–∫–∏
    if (!currentUserProfile) return;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–æ—Ñ–∏–ª–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –µ—Å–ª–∏:
    // 1. URL - /profile (–±–µ–∑ userId)
    // 2. URL - /profile/{uuid}, –≥–¥–µ uuid —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å uuid —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isOwnProfile = !userId || userId === currentUserProfile.uuid;
    setIsCurrentUser(isOwnProfile);
    
    // –ï—Å–ª–∏ URL /profile, –Ω–æ –±–µ–∑ userId, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /profile/{currentUserUuid}
    if (!userId && currentUserProfile.uuid) {
      navigate(`/profile/${currentUserProfile.uuid}`, { replace: true });
      return;
    }
    
    const fetchData = async () => {
      try {
        setLoading(true);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–∞—Ç—å
        const profileId = isOwnProfile ? currentUserProfile.uuid : userId;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        const profileData = await getUserProfile(profileId);
        
        if (!profileData) {
          setUserNotFound(true);
          setLoading(false);
          return;
        }
        
        setProfile(profileData);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —á—É–∂–æ–≥–æ
        if (isOwnProfile) {
          const projectsData = await getUserProjects(profileId);
          setProjects(projectsData);
        } else {
          const orgsData = await getUserOrganizations(profileId);
          setOrganizations(orgsData);
        }
        
        setUserNotFound(false);
      } catch (error) {
        console.error('Error fetching profile data:', error);
        setUserNotFound(true);
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, [userId, currentUserProfile, navigate]);
  
  const handleProfileUpdate = async (updatedProfile) => {
    try {
      // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
      console.log('ProfilePage sending update:', updatedProfile);
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –ø–æ–ª–µ–π
      const orderedProfile = {
        name: updatedProfile.name,
        surname: updatedProfile.surname,
        gender: updatedProfile.gender,
        date_of_birthday: updatedProfile.date_of_birthday,
        email: updatedProfile.email,
        password: updatedProfile.password
      };
      
      await updateUserProfile(profile.uuid, orderedProfile);
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const refreshedProfile = await getUserProfile(profile.uuid);
      setProfile(refreshedProfile);
    } catch (error) {
      console.error('Error updating profile:', error);
    }
  };
  
  const handleAvatarUpload = async (file) => {
    try {
      await uploadUserAvatar(profile.uuid, file);
      // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª—å,
      // —Ç–∞–∫ –∫–∞–∫ –∞–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ ProfileCard
    } catch (error) {
      console.error('Error uploading avatar:', error);
    }
  };
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (loading || !currentUserProfile) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
  if (userNotFound) {
    return (
      <div style={{ textAlign: 'center', marginTop: '50px' }}>
        <h2>üò¢</h2>
        <p>–ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç</p>
      </div>
    );
  }
  
  return (
    <ProfileContainer>
      <ProfileCard 
        profile={profile} 
        isCurrentUser={isCurrentUser}
        onProfileUpdate={handleProfileUpdate}
        onAvatarUpload={handleAvatarUpload}
      />
      
      {isCurrentUser ? (
        <ProjectsList projects={projects} />
      ) : (
        <OrganizationsList organizations={organizations} />
      )}
    </ProfileContainer>
  );
};

export default ProfilePage;