import React, { useState, useEffect, useContext } from 'react';
import ProfileCard from '../components/ProfileCard';
import ProjectsList from '../components/ProjectsList';
import OrganizationsList from '../components/OrganizationsList';
import { useParams } from 'react-router-dom';
// –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ –∑–∞–≥–ª—É—à–∫–∏
// import { getUserProfile, getUserProjects, getUserOrganizations } from '../api/users';
import { AuthContext } from '../context/AuthContext';
import { ProfileContainer } from '../styles/ProfileComponentStyles';

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è API-—Ñ—É–Ω–∫—Ü–∏–π
const getUserProfile = async (userId) => {
  console.log(`Fetching profile for user ${userId}`);
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (userId === 'notfound') {
    return null; // –°–∏–º—É–ª–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
  return {
    uuid: userId,
    login: 'user123',
    email: 'user@example.com',
    avatarUrl: '/default-avatar.png'
  };
};

const getUserProjects = async (userId) => {
  console.log(`Fetching projects for user ${userId}`);
  return [
    {
      uuid: 'proj-1',
      name: '–ü—Ä–æ–µ–∫—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
      organizationId: 'org-1'
    },
    {
      uuid: 'proj-2',
      name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è',
      organizationId: 'org-1'
    },
    {
      uuid: 'proj-3',
      name: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞',
      organizationId: 'org-2'
    }
  ];
};

const getUserOrganizations = async (userId) => {
  console.log(`Fetching organizations for user ${userId}`);
  return [
    {
      uuid: 'org-1',
      name: '–ö–æ–º–ø–∞–Ω–∏—è –ê'
    },
    {
      uuid: 'org-2',
      name: '–°—Ç–∞—Ä—Ç–∞–ø –ë'
    }
  ];
};

const ProfilePage = () => {
  const { userId } = useParams();
  const { profile: currentUserProfile } = useContext(AuthContext);
  
  const [profile, setProfile] = useState(null);
  const [projects, setProjects] = useState([]);
  const [organizations, setOrganizations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isCurrentUser, setIsCurrentUser] = useState(false);
  const [userNotFound, setUserNotFound] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
  useEffect(() => {
    const isOwnProfile = !userId || userId === currentUserProfile?.uuid;
    setIsCurrentUser(isOwnProfile);
    
    const fetchData = async () => {
      try {
        setLoading(true);
        
        const profileId = isOwnProfile ? currentUserProfile.uuid : userId;
        
        const profileData = await getUserProfile(profileId);
        
        if (!profileData) {
          setUserNotFound(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
          return;
        }
        
        setProfile(profileData);
        
        if (isOwnProfile) {
          const projectsData = await getUserProjects(profileId);
          setProjects(projectsData);
        } else {
          const orgsData = await getUserOrganizations(profileId);
          setOrganizations(orgsData);
        }
      } catch (error) {
        console.error('Error fetching profile data:', error);
      } finally {
        setLoading(false);
      }
    };
    
    if (currentUserProfile) {
      fetchData();
    }
  }, [userId, currentUserProfile]);
  
  const handleProfileUpdate = async (updatedProfile) => {
    try {
      console.log('Updating profile with:', updatedProfile);
      setProfile(updatedProfile);
    } catch (error) {
      console.error('Error updating profile:', error);
    }
  };
  
  if (loading || !currentUserProfile) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }
  
  if (userNotFound) {
    return (
      <div style={{ textAlign: 'center', marginTop: '50px' }}>
        <h2>üò¢</h2>
        <p>–ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç</p>
      </div>
    );
  }
  
  return (
    <ProfileContainer>
      <ProfileCard 
        profile={profile} 
        isCurrentUser={isCurrentUser}
        onProfileUpdate={handleProfileUpdate}
      />
      
      {isCurrentUser ? (
        <ProjectsList projects={projects} />
      ) : (
        <OrganizationsList organizations={organizations} />
      )}
    </ProfileContainer>
  );
};

export default ProfilePage;
