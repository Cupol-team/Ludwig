import React from 'react';
import PropTypes from 'prop-types';

function FileItem({ file, onDownload, onDelete, profileUuid }) {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –ë, –ö–ë –∏–ª–∏ –ú–ë
  const formatFileSize = (bytes) => {
    if (bytes < 1024) return `${bytes} –ë`;
    else if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} –ö–ë`;
    else return `${(bytes / (1024 * 1024)).toFixed(1)} –ú–ë`;
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
  const getFileTypeIcon = (extension) => {
    if (!extension) return 'üìÑ'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç
    
    const ext = extension.toLowerCase().replace('.', '');
    
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'].includes(ext)) {
      return 'üñºÔ∏è';
    }
    // –î–æ–∫—É–º–µ–Ω—Ç—ã
    if (['doc', 'docx', 'txt', 'rtf', 'odt', 'pdf'].includes(ext)) {
      return 'üìù';
    }
    // –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    if (['ppt', 'pptx', 'odp'].includes(ext)) {
      return 'üìä';
    }
    // –¢–∞–±–ª–∏—Ü—ã
    if (['xls', 'xlsx', 'csv', 'ods'].includes(ext)) {
      return 'üìà';
    }
    // –ê—Ä—Ö–∏–≤—ã
    if (['zip', 'rar', '7z', 'tar', 'gz'].includes(ext)) {
      return 'üóÇÔ∏è';
    }
    // –ê—É–¥–∏–æ
    if (['mp3', 'wav', 'ogg', 'flac', 'aac'].includes(ext)) {
      return 'üéµ';
    }
    // –í–∏–¥–µ–æ
    if (['mp4', 'avi', 'mov', 'wmv', 'mkv', 'webm'].includes(ext)) {
      return 'üé¨';
    }
    // –ö–æ–¥
    if (['js', 'jsx', 'ts', 'tsx', 'py', 'java', 'c', 'cpp', 'php', 'html', 'css', 'json'].includes(ext)) {
      return 'üíª';
    }
    
    return 'üìÑ'; // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
  const formatDate = (dateString) => {
    if (!dateString) return '';
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç Date
    const date = new Date(dateString);
    const now = new Date();
    const isToday = date.toDateString() === now.toDateString();
    
    const options = { 
      hour: '2-digit', 
      minute: '2-digit'
    };
    
    if (isToday) {
      return `–°–µ–≥–æ–¥–Ω—è, ${date.toLocaleTimeString('ru-RU', options)}`;
    } else {
      return date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getExtensionWithoutDot = (extension) => {
    if (!extension) return '';
    return extension.startsWith('.') ? extension.substring(1) : extension;
  };

  return (
    <li className="file-item">
      <div className="file-name-container">
        <p className="file-name">
          {getFileTypeIcon(file.extension)} {file.name}
          {file.extension && !file.name.endsWith(file.extension) ? `.${getExtensionWithoutDot(file.extension)}` : ''}
        </p>
        <small style={{ color: '#888', marginTop: '4px', display: 'block' }}>
          –ó–∞–≥—Ä—É–∂–µ–Ω: {formatDate(file.time_upload)}
        </small>
      </div>
      <div className="file-details">
        <p className="file-size">{formatFileSize(file.size)}</p>
        {file.max_downloads && (
          <p className="file-max-downloads">{file.number_downloads || 0}/{file.max_downloads}</p>
        )}
        {file.expire_time && (
          <p className="file-expire-time">
            –î–æ: {formatDate(file.expire_time)}
          </p>
        )}
      </div>
      <button
        type="button"
        className="download-button"
        onClick={() => onDownload && onDownload(file)}
        title="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª"
      >
        –°–∫–∞—á–∞—Ç—å
      </button>
      {profileUuid === file.who_upload && (
        <button
          type="button"
          className="delete-button"
          onClick={() => onDelete && onDelete(file)}
          title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"
        >
          –£–¥–∞–ª–∏—Ç—å
        </button>
      )}
    </li>
  );
}

FileItem.propTypes = {
  file: PropTypes.object.isRequired,
  onDownload: PropTypes.func,
  onDelete: PropTypes.func,
  profileUuid: PropTypes.string,
};

export default FileItem;